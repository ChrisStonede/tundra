// vim: ts=4 expandtab

The Tundra Build System
=======================
Andreas Fredriksson <dep@defmacro.se>

== Introduction ==

Tundra is a high-performance code build system designed to give the best
possible incremental build times even for very large software projects.

Its design was motivated by the games industry where projects are huge and
iterative rebuilding common. In games, teams of 20-30 developers working on the
same multi-MLOC codebase is not uncommon. Each second wasted by a build system
to produce a incremental build wastes productivity. But Tundra works well for
smaller projects too.

=== Design Philosphy ===

==== Simple and Fast ====

Tundra is written in ANSI C (C89), with very few files (the whole codebase
including scripts and tools is about 10000 lines of code). Aside from Lua,
there are no external dependencies. Most data structures in the C code are
simple arrays, either stack based or allocated from a linear allocator. All
allocations are discarded at once in pages when the program exits. This makes
the code simple and the program fast as very little time is spent worrying
about dynamic memory.

==== Utilize multi-core hardware ====

All serious developers are using multi-core machines, so it is important that
the build system can run multiple jobs at once. But it is equally important to
utilize these cores to do other things like file signing and implicit
dependency scanning. Tundra is one of very few (if any) build systems that do
this whenever possible. This design choice give a nice speedup to incremental
builds.

==== Reliably support code generation ====

Most build systems work perfectly until you start generating source files
dynamically in the build process. If these files are then included into other
files many build systems start misbehaving, especially if multiple jobs are run
concurrently. This is very hard to diagnose.

Tundra does away with this by adding the possibility of segmenting the build
into multiple, sequenced passes. Build jobs are only allowed to implicitly
depend on (that is, +#include+) files generated in previous passes. This keeps
file generation entirely predictable and it becomes easy to support a
multi-layered system where the code generation tool itself is built in a first
pass, it is run to generate output in a second pass and then the full build
commences. Tundra will still go wide within each pass, but each pass is fully
synchronous with regards to the others so using the +-j+ option is fully
supported.

==== Separate configuration and building ====

Tundra uses Lua as its scripting language, which gives it a high-performance,
powerful data collection frontend for free. However, to get the maximum speed
from builds, all build actions are carried out in multi-threaded C code with
carefully crafted memory allocation patterns. This ensures that pure build
speed is unaffected by bad scripting and it is easier to diagnose a slow build.

==== Don't guess ====

Tundra doesn't go out of its way to support auto-configuration of toolsets or
guessing what compiler you want to use. For a game project, there may be
millions of builds between adding a new platform or configuration to a build
system. Tools are also very brittle and need a specific configuration to
produce working builds. The time it will take to support a new toolset while
offset the time it takes to tell the build system about it by many magnitudes.

Tundra therefore must be told explicitly in configuration what tools to use and
how to run them, it never tries to auto-configure itself for your platform. If
you need this capability, Tundra is probably not for you.

== Hello, world ==

A Tundra project needs atleast two files, one is +tundra.lua+ which specifies
what build configurations are available for this project. Here is a sample
minimal +tundra.lua+ file that creates a configuration +macosx-gcc+ which pulls
in the default +gcc+ and +mono+ toolsets:

-------------------------------------------------------------------------------
Build {
    Units = "units.lua",
    Configs = {
        {
            Name = "macosx-gcc",
            DefaultOnHost = "macosx",
            Tools = { "gcc", "mono" },
        },
    },
}
-------------------------------------------------------------------------------

As you can see, it refers to another file, +units.lua+. The +Units+ file is a
declarative input file describing the targets that are available:

-------------------------------------------------------------------------------
Program {
    Name = "HelloWorld",
    Sources = { "hello.c" },
}
Default "HelloWorld"
-------------------------------------------------------------------------------

If we now run Tundra on this input, it will build our +HelloWorld+ executable:

-------------------------------------------------------------------------------
$ tundra
Cc tundra-output/macosx-gcc-debug-default/hello.o
Program tundra-output/macosx-gcc-debug-default/HelloWorld
*** build success, 2 jobs run
-------------------------------------------------------------------------------

The next mandatory step is of course to display the famous greeting:

-------------------------------------------------------------------------------
$ tundra-output/macosx-gcc-debug-default/HelloWorld
hello, world
-------------------------------------------------------------------------------

More examples can be found in the `examples` directory in the Tundra
distribution.

== Installation ==

=== Installing a binary package ===

Download a binary package from http://github.com/deplinenoise/tundra/downloads

Unpack it somewhere, and optionally stick it in your `PATH` environment
variable if you use Tundra a lot.

=== Installing from source ===

Tundra can be obtained from the official GIT repository:
`git://git@github.com:deplinenoise/tundra.git`.

To build tundra, you can either use tundra itself, or CMake.

To build with tundra, first install a binary package and then run:
-------------------------------------------------------------------------------
$ tundra release
$ cp tundra-output/macosx-clang-release-default/tundra .
-------------------------------------------------------------------------------

Obviously your output directory must be adjusted to whatever platform you are
actually building on. This example used the `macosx-clang` toolset.

To build with CMake:
-------------------------------------------------------------------------------
$ mkdir build-dir
$ cd build-dir
$ cmake ..
$ make
$ cp tundra ..
-------------------------------------------------------------------------------

The last line of both examples copies the resulting binary into the tundra root
dir (where it should live to be executed). If you prefer to run the executable
from the build directory (because you're hacking on some feature) you can set
the `TUNDRA_HOME` environment variable to the root directory of the tundra
source distribution instead.

== How Tundra works ==

A Tundra build can divided into a few distinct phases:

- Run the project's +tundra.lua+ script to set options
- Load toolsets, syntax files and other information as required by the configuration script
- Run the referred +Units+ file in syntax mode to define the project's build units
- Parse the resulting declarations and generate DAG nodes
- Pass the DAG to the native build engine

== The +tundra.lua+ file ==

The file +tundra.lua+ is read by Tundra when you invoke it. This is a regular
Lua source file. Its purpose is to call the global +Build+ function with a
declarative input describing the build session to Tundra. The following
sections are a reference of what you can place in the +Build+ block.
Declarations within the block can appear in any order.

=== Units (required) ===

The build block must contain a reference to a secondary file containing unit
declarations. This file is separate because it uses a custom, extensible syntax
set which is suitable to define build system input. The +Units+ option must be
a string designating the filename to read. A common name is +"units.lua"+, but
any valid filename is OK.

=== Configs (required) ===

The +Configs+ key should be set to an array of configurations this build
supports. Each configuration is in turn a table with the following syntax:

-------------------------------------------------------------------------------
    {
        Name = "myplatform-mytoolset",
        Tools = { ... },
        DefaultOnHost = "..." ,
        Inherit = ...,
        Env = { ... },
    }
-------------------------------------------------------------------------------

==== Per-config +Name+ property (required) ====

The name of this configuration. Configuration names must be formatted in a
dashed `platform-toolset` format. These two tokens form the first two in the
quad `platform-toolset-variant-subvariant` system Tundra uses to id builds.

==== Per-config +Tools+ property (required) ====

A list of tools this configuration uses. A tool specification is either a
string, indicating that the defaults for that tool are to be used, or a table
`{ "toolname"; Foo=1, Bar=".." }` passing arbitrary options to the tool to
configure it. Tools are loaded from the tool directory list.

Projects can add their own tool scripts via a +ToolsetDirs+ array property in
the +Build+ block.

==== Per-config +DefaultOnHost+ property (optional) ====

If present, this config will be built by default when the host platform matches
the string. This is convenient to have the host's native configuration build
in the default variant when you just type `tundra` in the shell.

==== Per-config +Inherit+ property (optional) ====

If present, must be set to a table. This table will be scanned for values if
they are not present in the Config table itself. This is useful to group common
settings between configs in external tables:

-----------------------------------------------------------------------------
local foo_common = { Env = { CPPDEFS = { "Bar", "Baz" } } }

Build {
  Configs = {
    { Name = "foo-bar", Inherit = foo_common, ... },
    { Name = "foo-baz", Inherit = foo_common, ... },
    ...
  },
}
-----------------------------------------------------------------------------

==== Per-config +Env+ property (optional) ====

If present, must be set to a table. This table contains key-value bindings to
apply to the environment for this configuration. This typically includes things
such as include paths (`CPPPATH`), C preprocessor defines (`CPPDEFS`) and C
compiler options (`CCOPTS`).

-----------------------------------------------------------------------------
Build {
  Configs = {
    { Name = "foo-bar", Env = { CPPDEFS = { "FOO", "BAR=BAZ", ... } }, },
    ...
  },
}
-----------------------------------------------------------------------------

=== Passes (optional) ===

The build block can contain an array of passes which can be used to place
barriers between groups of build jobs. This is required if files are generated
that can be discovered only as implicit dependencies.

Here's an example of how +Passes+ can be used within the +Build+ block:
-------------------------------------------------------------------------------
    Passes = {
        Foo = { Name="User friendly name", BuildOrder = 1 },
        Bar = { Name="Some other name", BuildOrder = 2 },
        -- ...
    },
-------------------------------------------------------------------------------

== The Environment ==

Tundra uses a hierarchical key-value environment to store information used to
build the commands to run. This design is similar to the SCons environment.
Values are always stored as lists (in this way the environment is similar to
Jam variables).

=== The basic environment ===

With no tools or platform settings loaded, the following keys are always available:

- +OBJECTROOT+ - specifies the directory in which variant-specific build
  directories will be created (default: +tundra-output+)

- +SEP+ - The path separator used on the host platform

=== Interpolation ===

Basic interpolation is written +$(FOO)+ and just fetches the value associated
with +FOO+ from the environment structure. If +FOO+ is bound to multiple
values, they are joined together with spaces.

=== Interpolation Options ===

Tundra includes a number of interpolation shortcuts to build strings from the
environment. For example, to construct a list of include paths
from a environment variable +CPPPATH+, you can say +$(CPPPATH:p-I)+.

.Interpolation Syntax
[width="90%",cols="1,9",options="header"]
|=============================================================================
|Syntax                 |Effect
|+$(VAR:f)+             |Convert to forward slashes (+/+)
|+$(VAR:b)+             |Convert to backward slashes (+\+)
|+$(VAR:u)+             |Convert to upper case
|+$(VAR:l)+             |Convert to lower case
|+$(VAR:p<prefix>)+     |Prefix all values with the string +<prefix>+
|+$(VAR:s<suffix>)+     |Suffix all values with the string +<suffix>+
|+$(VAR:[<index>])+     |Select the item at the (one-based) +index+
|+$(VAR:j<sep>)+        |Join all values with +<sep>+ as a separator rather than space
|+$(VAR:A<suffix>)+     |Suffix all values with +<suffix>+ unless it is already there
|+$(VAR:P<prefix>)+     |Prefix all values with +<prefix>+ unless it is already there
|=============================================================================

These interpolation options can be combined arbitrarily by tacking on several
options. If an option parameter contains a colon the colon must be escaped with
a backslash or it will be taken as the start of the next interpolation option.

=== Interpolation Examples ===

Assume there is an environment with the following bindings:

[width="90%",cols="1,9"]
|=============================================================================
|+FOO+              |+"String"+
|+BAR+              |+{ "A", "B", "C" }+
|=============================================================================

Then interpolating the following strings will give the associated result:

[width="90%",cols="1,9",options="header"]
|=============================================================================
|Expression             |Resulting String
|`$(FOO)`               |`String`
|`$(FOO:u)`             |`STRING`
|`$(FOO:l)`             |`string`
|`$(FOO:p__)`           |`__String`
|`$(FOO:p__:s__)`       |`__String__`
|`$(BAR)`               |`A B C`
|`$(BAR:u)`             |`A B C`
|`$(BAR:l)`             |`a b c`
|`$(BAR:p__)`           |`__A __B __C`
|`$(BAR:p__:s__:j!)`    |`__A__!__B__!__C__`
|`$(BAR:p\::s!)`        |`:A! :B! :C!`
|`$(BAR:AC)`            |`AC BC C`
|=============================================================================

=== Nested Interpolation ===

Nested interpolation is possible, but should be used with care as it can be
hard to debug and understand. Here's an example of how the generic C toolchain
inserts compiler options dependening on what variant is currently active:

`$(CCOPTS_$(CURRENT_VARIANT:u))`

This works becase the inner expansion will evalate `CURRENT_VARIANT` first
(say, it has the value +debug+). That value is then converted to upper-case and
spliced into the former which yields a new expression `$(CCOPTS_DEBUG)` which
is then expanded in turn.

Used with care this is a powerful way of letting users customize variables per
configuration and then glue everything together with a simple template.

// vim: set syntax=asciidoc

